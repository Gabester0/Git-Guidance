////////////////  Free Code Camp User Stories:  /////////////////////////
////////////////////////////////////////////////////////////////////////

        [x] User Story #1: I can see a main element with a corresponding id="main-doc", which contains the page's main content (technical documentation).
        [x] User Story #2: Within the #main-doc element, I can see several section elements, each with a class of main-section. There should be a minimum of 5.
        [x] User Story #3: The first element within each .main-section should be a header element which contains text that describes the topic of that section.
        [x] User Story #4: Each section element with the class of main-section should also have an id that corresponds with the text of each header contained within it. Any spaces should be replaced with underscores (e.g. The section that contains the header "Javascript and Java" should have a corresponding id="Javascript_and_Java").
        [x] User Story #5: The .main-section elements should contain at least 10 p elements total (not each).
        [x] User Story #6: The .main-section elements should contain at least 5 code elements total (not each).
        [x] User Story #7: The .main-section elements should contain at least 5 li items total (not each).
        [x] User Story #8: I can see a nav element with a corresponding id="navbar".
        [x] User Story #9: The navbar element should contain one header element which contains text that describes the topic of the technical documentation.
        [x] User Story #10: Additionally, the navbar should contain link (a) elements with the class of nav-link. There should be one for every element with the class main-section.
        [x] User Story #11: The header element in the navbar must come before any link (a) elements in the navbar.
        [x] User Story #12: Each element with the class of nav-link should contain text that corresponds to the header text within each section (e.g. if you have a "Hello world" section/header, your navbar should have an element which contains the text "Hello world").
        [x] User Story #13: When I click on a navbar element, the page should navigate to the corresponding section of the main-doc element (e.g. If I click on a nav-link element that contains the text "Hello world", the page navigates to a section element that has that id and contains the corresponding header.
        [x] User Story #14: On regular sized devices (laptops, desktops), the element with id="navbar" should be shown on the left side of the screen and should always be visible to the user.
[] User Story #15: My Technical Documentation page should use at least one media query.
        [x] You can build your project by forking this CodePen pen. Or you can use this CDN link to run the tests in any environment you like: https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js
[] Once you're done, submit the URL to your working project with all its tests passing.

////////////////      Gabe's User Stories:      /////////////////////////
////////////////////////////////////////////////////////////////////////

        [x] Gabe Story #1: Create a GIT Repository and use to control versions
        [x] Gabe Story #2: Create a What I Am Assuming section (You already have a code editor installed and are
            comfortable writing code in it; You already have created a Github account)
        [x] Gabe Story #3: Cover: how to find your terminal (https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners)
        [x] Gabe Story #4: Cover: how to navigate your code editor (cd, .. to go up, dir name to go into,
            tab to auto-complete file name, dir to see folder/file names)

        [x] Gabe Story #6: Each item in this GitGuide should be 2 parts.  A introduction and simple definition
            of terms.  A walkthrough of the steps involved with this item and screenshots of terminal
        [x] Gabe Story #7:  My Guide will cover at least the following steps:
        [x] Gabe Story #8: Navigating the fileSystem
        [x] Gabe Story #9: Initiating a local GIT repository (cover mkdir command here) And also cover that
            by running git init you are started off with master branch.  
        [x] Gabe Story #10: The staging area and what it means for your code to be in the staging 
            area along with adding files to the staging area 
[] Gabe Story #11: Creating a new repository on Github
[] Gabe Story #5: Cover: linking your local machine to your git repository.  
[] Gabe Story #12: Making your first commit from the local machine to Github (what is the difference
            between local master and remote master)
[] Gabe Story #13: Git Branches and how to make a branch and how to navigate between Branches
[] Gabe Story #14: Why we use a branch (Safe way to change your code without ruining your work so far)
[] Gabe Story #15: Making a commit from a branch (Add to staging; create commit; push to remote master)
[] Gabe Story #16: Creating a pull request and merging it to master (if green) and deleting 
            branch (remember, you are just deleting the branch from Github, it is still local)
[] Gabe Story #17: Catching your local Master up to remote master (don't forget to move back 
            to master branch first)
[] Gabe Story #18: Deleting your first branch (now it is really gone.)
[] Gabe Story #19: Apply the FCC Accessibility steps to this project
                        [x] All img tags have an alt description.
[] Gabe Story #20: Store all images in organized folders
            [] All images are stored in images folder
            [] All links are updated to reflect folder structure
            [] All images are stored in sub-folders named for the section of the tutorial they are used in.  
                        [x] Complete + prettify code for Creating and Initiating
            [] Complete + prettify code for Navigating the terminal
            [] Complete + prettify code for Installation
            [] Complete + prettify code for Introduction and assumptions
            [] Complete + prettify code for Configuring